scalar Time

type User {
  id: String!
  username: String!
  email: String!
  role: UserRole!
  reputation: UserReputation
  createdAt: Time!
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserReputation {
  reputationScore: Int!
  badges: [String!]!
}

enum UserRole {
  REGULAR
  MODERATOR
  ADMIN
}

input ChangeUsername {
  id: String!
  username: String!
}

input RegisterUser {
  email: String!
  username: String!
}

extend type Query {
  getUserById(id: String!): User
  getUsers(first: Int = 10, after: String): UserConnection!
}

extend type Mutation {
  changeUsername(input: ChangeUsername!): User
  makeModerator(id: String!): User
  registerUser(input: RegisterUser!): User
}
