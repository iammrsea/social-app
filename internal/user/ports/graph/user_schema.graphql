scalar Time

type User {
    id: String!
    username: String!
    email: String!
    role: UserRole!
    reputation: UserReputation
    createdAt: Time!
    updatedAt: Time!
    banStatus: UserBanStatus!
}

type UserEdge {
    node: User!
    cursor: String!
}

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
}

type UserReputation {
    reputationScore: Int!
    badges: [String!]!
}

type UserBanStatus {
    bannedAt: Time
    banStartDate: Time
    banEndDate: Time
    isBanIndefinite: Boolean
    reasonForBan: String
    isBanned: Boolean!
}

enum UserRole {
    REGULAR
    MODERATOR
    ADMIN
}

input ChangeUsername {
    id: String!
    username: String!
}

input RegisterUser {
    email: String!
    username: String!
}

extend type Query {
    getUserById(id: String!): User
    getUsers(first: Int = 10, after: String): UserConnection!
    getUserByEmail(email: String!): User
}

input AwardBadge {
    id: String!
    badge: String!
}

extend type Mutation {
    changeUsername(input: ChangeUsername!): User
    makeModerator(id: String!): User
    banUser(id: String!): User
    registerUser(input: RegisterUser!): User
    awardBadge(input: AwardBadge!): User
    revokeAwardedBadge(input: AwardBadge!): User
}
