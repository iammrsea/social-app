// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package guards_mocks

import (
	"github.com/iammrsea/social-app/internal/shared/auth"
	"github.com/iammrsea/social-app/internal/shared/guards/rbac"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGuards creates a new instance of MockGuards. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGuards(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGuards {
	mock := &MockGuards{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGuards is an autogenerated mock type for the Guards type
type MockGuards struct {
	mock.Mock
}

type MockGuards_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGuards) EXPECT() *MockGuards_Expecter {
	return &MockGuards_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function for the type MockGuards
func (_mock *MockGuards) Authorize(role rbac.UserRole, perm rbac.Permission) error {
	ret := _mock.Called(role, perm)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(rbac.UserRole, rbac.Permission) error); ok {
		r0 = returnFunc(role, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGuards_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockGuards_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - role
//   - perm
func (_e *MockGuards_Expecter) Authorize(role interface{}, perm interface{}) *MockGuards_Authorize_Call {
	return &MockGuards_Authorize_Call{Call: _e.mock.On("Authorize", role, perm)}
}

func (_c *MockGuards_Authorize_Call) Run(run func(role rbac.UserRole, perm rbac.Permission)) *MockGuards_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(rbac.UserRole), args[1].(rbac.Permission))
	})
	return _c
}

func (_c *MockGuards_Authorize_Call) Return(err error) *MockGuards_Authorize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGuards_Authorize_Call) RunAndReturn(run func(role rbac.UserRole, perm rbac.Permission) error) *MockGuards_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// CanChangeUsername provides a mock function for the type MockGuards
func (_mock *MockGuards) CanChangeUsername(userId string, authUser *auth.AuthenticatedUser) error {
	ret := _mock.Called(userId, authUser)

	if len(ret) == 0 {
		panic("no return value specified for CanChangeUsername")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, *auth.AuthenticatedUser) error); ok {
		r0 = returnFunc(userId, authUser)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGuards_CanChangeUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanChangeUsername'
type MockGuards_CanChangeUsername_Call struct {
	*mock.Call
}

// CanChangeUsername is a helper method to define mock.On call
//   - userId
//   - authUser
func (_e *MockGuards_Expecter) CanChangeUsername(userId interface{}, authUser interface{}) *MockGuards_CanChangeUsername_Call {
	return &MockGuards_CanChangeUsername_Call{Call: _e.mock.On("CanChangeUsername", userId, authUser)}
}

func (_c *MockGuards_CanChangeUsername_Call) Run(run func(userId string, authUser *auth.AuthenticatedUser)) *MockGuards_CanChangeUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*auth.AuthenticatedUser))
	})
	return _c
}

func (_c *MockGuards_CanChangeUsername_Call) Return(err error) *MockGuards_CanChangeUsername_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGuards_CanChangeUsername_Call) RunAndReturn(run func(userId string, authUser *auth.AuthenticatedUser) error) *MockGuards_CanChangeUsername_Call {
	_c.Call.Return(run)
	return _c
}
