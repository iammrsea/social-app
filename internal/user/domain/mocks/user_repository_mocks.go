// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"

	"github.com/iammrsea/social-app/internal/user/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserReadModelRepository creates a new instance of MockUserReadModelRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserReadModelRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserReadModelRepository {
	mock := &MockUserReadModelRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserReadModelRepository is an autogenerated mock type for the UserReadModelRepository type
type MockUserReadModelRepository struct {
	mock.Mock
}

type MockUserReadModelRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserReadModelRepository) EXPECT() *MockUserReadModelRepository_Expecter {
	return &MockUserReadModelRepository_Expecter{mock: &_m.Mock}
}

// GetUserByEmail provides a mock function for the type MockUserReadModelRepository
func (_mock *MockUserReadModelRepository) GetUserByEmail(ctx context.Context, email string) (*domain.UserReadModel, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *domain.UserReadModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.UserReadModel, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.UserReadModel); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserReadModel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserReadModelRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserReadModelRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserReadModelRepository_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserReadModelRepository_GetUserByEmail_Call {
	return &MockUserReadModelRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserReadModelRepository_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserReadModelRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserReadModelRepository_GetUserByEmail_Call) Return(userReadModel *domain.UserReadModel, err error) *MockUserReadModelRepository_GetUserByEmail_Call {
	_c.Call.Return(userReadModel, err)
	return _c
}

func (_c *MockUserReadModelRepository_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*domain.UserReadModel, error)) *MockUserReadModelRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function for the type MockUserReadModelRepository
func (_mock *MockUserReadModelRepository) GetUserById(ctx context.Context, id string) (*domain.UserReadModel, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *domain.UserReadModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.UserReadModel, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.UserReadModel); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserReadModel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserReadModelRepository_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockUserReadModelRepository_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserReadModelRepository_Expecter) GetUserById(ctx interface{}, id interface{}) *MockUserReadModelRepository_GetUserById_Call {
	return &MockUserReadModelRepository_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, id)}
}

func (_c *MockUserReadModelRepository_GetUserById_Call) Run(run func(ctx context.Context, id string)) *MockUserReadModelRepository_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserReadModelRepository_GetUserById_Call) Return(userReadModel *domain.UserReadModel, err error) *MockUserReadModelRepository_GetUserById_Call {
	_c.Call.Return(userReadModel, err)
	return _c
}

func (_c *MockUserReadModelRepository_GetUserById_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.UserReadModel, error)) *MockUserReadModelRepository_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function for the type MockUserReadModelRepository
func (_mock *MockUserReadModelRepository) GetUsers(ctx context.Context, opts domain.GetUsersOptions) ([]*domain.UserReadModel, bool, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*domain.UserReadModel
	var r1 bool
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.GetUsersOptions) ([]*domain.UserReadModel, bool, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.GetUsersOptions) []*domain.UserReadModel); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.UserReadModel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.GetUsersOptions) bool); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.GetUsersOptions) error); ok {
		r2 = returnFunc(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserReadModelRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockUserReadModelRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx
//   - opts
func (_e *MockUserReadModelRepository_Expecter) GetUsers(ctx interface{}, opts interface{}) *MockUserReadModelRepository_GetUsers_Call {
	return &MockUserReadModelRepository_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, opts)}
}

func (_c *MockUserReadModelRepository_GetUsers_Call) Run(run func(ctx context.Context, opts domain.GetUsersOptions)) *MockUserReadModelRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.GetUsersOptions))
	})
	return _c
}

func (_c *MockUserReadModelRepository_GetUsers_Call) Return(users []*domain.UserReadModel, hasNext bool, err error) *MockUserReadModelRepository_GetUsers_Call {
	_c.Call.Return(users, hasNext, err)
	return _c
}

func (_c *MockUserReadModelRepository_GetUsers_Call) RunAndReturn(run func(ctx context.Context, opts domain.GetUsersOptions) ([]*domain.UserReadModel, bool, error)) *MockUserReadModelRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// AwardBadge provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) AwardBadge(ctx context.Context, userId string, updateFn func(user *domain.User) error) error {
	ret := _mock.Called(ctx, userId, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for AwardBadge")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(user *domain.User) error) error); ok {
		r0 = returnFunc(ctx, userId, updateFn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_AwardBadge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AwardBadge'
type MockUserRepository_AwardBadge_Call struct {
	*mock.Call
}

// AwardBadge is a helper method to define mock.On call
//   - ctx
//   - userId
//   - updateFn
func (_e *MockUserRepository_Expecter) AwardBadge(ctx interface{}, userId interface{}, updateFn interface{}) *MockUserRepository_AwardBadge_Call {
	return &MockUserRepository_AwardBadge_Call{Call: _e.mock.On("AwardBadge", ctx, userId, updateFn)}
}

func (_c *MockUserRepository_AwardBadge_Call) Run(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error)) *MockUserRepository_AwardBadge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(user *domain.User) error))
	})
	return _c
}

func (_c *MockUserRepository_AwardBadge_Call) Return(err error) *MockUserRepository_AwardBadge_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_AwardBadge_Call) RunAndReturn(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error) error) *MockUserRepository_AwardBadge_Call {
	_c.Call.Return(run)
	return _c
}

// BanUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) BanUser(ctx context.Context, userId string, updateFn func(user *domain.User) error) error {
	ret := _mock.Called(ctx, userId, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for BanUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(user *domain.User) error) error); ok {
		r0 = returnFunc(ctx, userId, updateFn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_BanUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BanUser'
type MockUserRepository_BanUser_Call struct {
	*mock.Call
}

// BanUser is a helper method to define mock.On call
//   - ctx
//   - userId
//   - updateFn
func (_e *MockUserRepository_Expecter) BanUser(ctx interface{}, userId interface{}, updateFn interface{}) *MockUserRepository_BanUser_Call {
	return &MockUserRepository_BanUser_Call{Call: _e.mock.On("BanUser", ctx, userId, updateFn)}
}

func (_c *MockUserRepository_BanUser_Call) Run(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error)) *MockUserRepository_BanUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(user *domain.User) error))
	})
	return _c
}

func (_c *MockUserRepository_BanUser_Call) Return(err error) *MockUserRepository_BanUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_BanUser_Call) RunAndReturn(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error) error) *MockUserRepository_BanUser_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeUsername provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) ChangeUsername(ctx context.Context, userId string, updateFn func(user *domain.User) error) error {
	ret := _mock.Called(ctx, userId, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for ChangeUsername")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(user *domain.User) error) error); ok {
		r0 = returnFunc(ctx, userId, updateFn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_ChangeUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeUsername'
type MockUserRepository_ChangeUsername_Call struct {
	*mock.Call
}

// ChangeUsername is a helper method to define mock.On call
//   - ctx
//   - userId
//   - updateFn
func (_e *MockUserRepository_Expecter) ChangeUsername(ctx interface{}, userId interface{}, updateFn interface{}) *MockUserRepository_ChangeUsername_Call {
	return &MockUserRepository_ChangeUsername_Call{Call: _e.mock.On("ChangeUsername", ctx, userId, updateFn)}
}

func (_c *MockUserRepository_ChangeUsername_Call) Run(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error)) *MockUserRepository_ChangeUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(user *domain.User) error))
	})
	return _c
}

func (_c *MockUserRepository_ChangeUsername_Call) Return(err error) *MockUserRepository_ChangeUsername_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_ChangeUsername_Call) RunAndReturn(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error) error) *MockUserRepository_ChangeUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserBy provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserBy(ctx context.Context, fieldName string, value any) (*domain.User, error) {
	ret := _mock.Called(ctx, fieldName, value)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBy")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any) (*domain.User, error)); ok {
		return returnFunc(ctx, fieldName, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any) *domain.User); ok {
		r0 = returnFunc(ctx, fieldName, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, any) error); ok {
		r1 = returnFunc(ctx, fieldName, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserBy'
type MockUserRepository_GetUserBy_Call struct {
	*mock.Call
}

// GetUserBy is a helper method to define mock.On call
//   - ctx
//   - fieldName
//   - value
func (_e *MockUserRepository_Expecter) GetUserBy(ctx interface{}, fieldName interface{}, value interface{}) *MockUserRepository_GetUserBy_Call {
	return &MockUserRepository_GetUserBy_Call{Call: _e.mock.On("GetUserBy", ctx, fieldName, value)}
}

func (_c *MockUserRepository_GetUserBy_Call) Run(run func(ctx context.Context, fieldName string, value any)) *MockUserRepository_GetUserBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any))
	})
	return _c
}

func (_c *MockUserRepository_GetUserBy_Call) Return(user *domain.User, err error) *MockUserRepository_GetUserBy_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserBy_Call) RunAndReturn(run func(ctx context.Context, fieldName string, value any) (*domain.User, error)) *MockUserRepository_GetUserBy_Call {
	_c.Call.Return(run)
	return _c
}

// MakeModerator provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) MakeModerator(ctx context.Context, userId string, updateFn func(user *domain.User) error) error {
	ret := _mock.Called(ctx, userId, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for MakeModerator")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(user *domain.User) error) error); ok {
		r0 = returnFunc(ctx, userId, updateFn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_MakeModerator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeModerator'
type MockUserRepository_MakeModerator_Call struct {
	*mock.Call
}

// MakeModerator is a helper method to define mock.On call
//   - ctx
//   - userId
//   - updateFn
func (_e *MockUserRepository_Expecter) MakeModerator(ctx interface{}, userId interface{}, updateFn interface{}) *MockUserRepository_MakeModerator_Call {
	return &MockUserRepository_MakeModerator_Call{Call: _e.mock.On("MakeModerator", ctx, userId, updateFn)}
}

func (_c *MockUserRepository_MakeModerator_Call) Run(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error)) *MockUserRepository_MakeModerator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(user *domain.User) error))
	})
	return _c
}

func (_c *MockUserRepository_MakeModerator_Call) Return(err error) *MockUserRepository_MakeModerator_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_MakeModerator_Call) RunAndReturn(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error) error) *MockUserRepository_MakeModerator_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Register(ctx context.Context, user domain.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserRepository_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) Register(ctx interface{}, user interface{}) *MockUserRepository_Register_Call {
	return &MockUserRepository_Register_Call{Call: _e.mock.On("Register", ctx, user)}
}

func (_c *MockUserRepository_Register_Call) Run(run func(ctx context.Context, user domain.User)) *MockUserRepository_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *MockUserRepository_Register_Call) Return(err error) *MockUserRepository_Register_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Register_Call) RunAndReturn(run func(ctx context.Context, user domain.User) error) *MockUserRepository_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAwardedBadge provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) RevokeAwardedBadge(ctx context.Context, userId string, updateFn func(user *domain.User) error) error {
	ret := _mock.Called(ctx, userId, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAwardedBadge")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(user *domain.User) error) error); ok {
		r0 = returnFunc(ctx, userId, updateFn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_RevokeAwardedBadge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAwardedBadge'
type MockUserRepository_RevokeAwardedBadge_Call struct {
	*mock.Call
}

// RevokeAwardedBadge is a helper method to define mock.On call
//   - ctx
//   - userId
//   - updateFn
func (_e *MockUserRepository_Expecter) RevokeAwardedBadge(ctx interface{}, userId interface{}, updateFn interface{}) *MockUserRepository_RevokeAwardedBadge_Call {
	return &MockUserRepository_RevokeAwardedBadge_Call{Call: _e.mock.On("RevokeAwardedBadge", ctx, userId, updateFn)}
}

func (_c *MockUserRepository_RevokeAwardedBadge_Call) Run(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error)) *MockUserRepository_RevokeAwardedBadge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(user *domain.User) error))
	})
	return _c
}

func (_c *MockUserRepository_RevokeAwardedBadge_Call) Return(err error) *MockUserRepository_RevokeAwardedBadge_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_RevokeAwardedBadge_Call) RunAndReturn(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error) error) *MockUserRepository_RevokeAwardedBadge_Call {
	_c.Call.Return(run)
	return _c
}

// UnbanUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) UnbanUser(ctx context.Context, userId string, updateFn func(user *domain.User) error) error {
	ret := _mock.Called(ctx, userId, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for UnbanUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(user *domain.User) error) error); ok {
		r0 = returnFunc(ctx, userId, updateFn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_UnbanUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnbanUser'
type MockUserRepository_UnbanUser_Call struct {
	*mock.Call
}

// UnbanUser is a helper method to define mock.On call
//   - ctx
//   - userId
//   - updateFn
func (_e *MockUserRepository_Expecter) UnbanUser(ctx interface{}, userId interface{}, updateFn interface{}) *MockUserRepository_UnbanUser_Call {
	return &MockUserRepository_UnbanUser_Call{Call: _e.mock.On("UnbanUser", ctx, userId, updateFn)}
}

func (_c *MockUserRepository_UnbanUser_Call) Run(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error)) *MockUserRepository_UnbanUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(user *domain.User) error))
	})
	return _c
}

func (_c *MockUserRepository_UnbanUser_Call) Return(err error) *MockUserRepository_UnbanUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_UnbanUser_Call) RunAndReturn(run func(ctx context.Context, userId string, updateFn func(user *domain.User) error) error) *MockUserRepository_UnbanUser_Call {
	_c.Call.Return(run)
	return _c
}

// UserExists provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) UserExists(ctx context.Context, email string, username string) (bool, error) {
	ret := _mock.Called(ctx, email, username)

	if len(ret) == 0 {
		panic("no return value specified for UserExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, email, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, email, username)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_UserExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExists'
type MockUserRepository_UserExists_Call struct {
	*mock.Call
}

// UserExists is a helper method to define mock.On call
//   - ctx
//   - email
//   - username
func (_e *MockUserRepository_Expecter) UserExists(ctx interface{}, email interface{}, username interface{}) *MockUserRepository_UserExists_Call {
	return &MockUserRepository_UserExists_Call{Call: _e.mock.On("UserExists", ctx, email, username)}
}

func (_c *MockUserRepository_UserExists_Call) Run(run func(ctx context.Context, email string, username string)) *MockUserRepository_UserExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserRepository_UserExists_Call) Return(b bool, err error) *MockUserRepository_UserExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockUserRepository_UserExists_Call) RunAndReturn(run func(ctx context.Context, email string, username string) (bool, error)) *MockUserRepository_UserExists_Call {
	_c.Call.Return(run)
	return _c
}
